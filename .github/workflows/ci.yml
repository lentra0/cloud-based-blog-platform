name: CI Pipeline

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:6
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Backend Dependencies
        run: |
          cd backend
          pip install --no-cache-dir -r requirements.txt

        - name: Start Backend Service
        run: |
            cd backend
            export DATABASE_URL="postgresql://postgres:postgres@postgres:5432/postgres"
            uvicorn app.main:app --host 0.0.0.0 --port 8000 &
            for i in {1..10}; do
              if pg_isready -h postgres -U postgres -d postgres; then
                echo "PostgreSQL is ready!"
                break
              fi
              echo "Waiting for PostgreSQL... ($i/10)"
              sleep 5
            done
            for i in {1..10}; do
              if curl -s http://localhost:8000/api/posts >/dev/null; then
                echo "Backend is up!"
                break
              fi
              echo "Waiting for backend... ($i/10)"
              sleep 5
            done

      - name: Test Backend Availability
        run: |
          curl -f http://localhost:8000/api/posts || exit 1

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Frontend Dependencies
        run: |
          cd frontend
          npm install

      - name: Build Frontend
        run: |
          cd frontend
          npm run build

      - name: Build Docker Images
        run: |
          docker build -t cloud-blog-backend:latest ./backend
          docker build -t cloud-blog-frontend:latest ./frontend
