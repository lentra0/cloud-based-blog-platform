name: CI Pipeline

permissions:
  contents: read
  packages: write
  id-token: write
  pull-requests: write

on:
  push:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAMESPACE: lentra0

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Backend Image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/backend:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/frontend:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up KinD Cluster
        uses: helm/kind-action@v1

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Create image pull secret
        run: |
          kubectl create secret docker-registry ghcr-secret \
            --docker-server=${{ env.REGISTRY }} \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GITHUB_TOKEN }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create Kubernetes secrets
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          GF_PASSWORD: ${{ secrets.GF_SECURITY_ADMIN_PASSWORD }}
        run: |
          kubectl create secret generic postgres-secrets \
            --from-literal=POSTGRES_PASSWORD="${POSTGRES_PASSWORD}" --dry-run=client -o yaml | kubectl apply -f -
          # The DATABASE_URL must include the port (:5432) to prevent connection errors
          kubectl create secret generic backend-secrets \
            --from-literal=DATABASE_URL="postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/postgres" --dry-run=client -o yaml | kubectl apply -f -
          kubectl create secret generic grafana-secrets \
            --from-literal=GF_SECURITY_ADMIN_PASSWORD="${GF_PASSWORD}" --dry-run=client -o yaml | kubectl apply -f -

      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f kubernetes/

      - name: Update deployments with specific image tags
        run: |
          # Update backend deployment with specific image tag and pull secret
          kubectl set image deployment/backend backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/backend:${{ github.sha }}
          kubectl patch deployment backend -p '{"spec":{"template":{"spec":{"imagePullSecrets":[{"name":"ghcr-secret"}]}}}}'
          
          # Update frontend deployment with specific image tag and pull secret
          kubectl set image deployment/frontend frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/frontend:${{ github.sha }}
          kubectl patch deployment frontend -p '{"spec":{"template":{"spec":{"imagePullSecrets":[{"name":"ghcr-secret"}]}}}}'

      - name: Wait for database to be ready
        run: |
          echo "Waiting for PostgreSQL deployment to complete..."
          kubectl rollout status deployment/postgres --timeout=120s
          
          # Give PostgreSQL time to initialize
          echo "Waiting for PostgreSQL to initialize..."
          kubectl wait --for=condition=ready pod -l app=postgres --timeout=60s || true
          sleep 10

      - name: Verify backend can connect to database
        run: |
          echo "Checking backend pod events..."
          kubectl get events --field-selector involvedObject.kind=Pod | grep backend || true
          
          echo "Checking if backend pods are created..."
          kubectl get pods -l app=backend

      - name: Wait for application rollouts
        run: |
          echo "Waiting for backend rollout to complete..."
          kubectl rollout status deployment/backend --timeout=300s
          
          echo "Waiting for frontend rollout to complete..."
          kubectl rollout status deployment/frontend --timeout=300s

      - name: Verify deployments
        run: |
          echo "--- Deployment Status ---"
          kubectl get deployments
          echo "--- Pod Status ---"
          kubectl get pods
          echo "--- Service Status ---"
          kubectl get services

      - name: Debug pods on failure
        if: failure()
        run: |
          echo "--- Pod Status ---"
          kubectl get pods -A -o wide
          echo "--- Pod Events ---"
          kubectl get events --sort-by='.lastTimestamp'
          echo "--- Pod Descriptions ---"
          kubectl describe pods
          echo "--- Backend Logs ---"
          kubectl logs deployment/backend --all-containers=true --tail=200 || true
          echo "--- Frontend Logs ---"
          kubectl logs deployment/frontend --all-containers=true --tail=200 || true
          echo "--- Postgres Logs ---"
          kubectl logs deployment/postgres --all-containers=true --tail=200 || true
          echo "--- Deployment Rollout History ---"
          kubectl rollout history deployment/backend || true
          kubectl rollout history deployment/frontend || true